# Score Matrices and Look-up Functions==================================================================================

# Default Nucleotide Scoring values and table

MatchScore = 5
MismatchScore = -3
GapScore = -4

NucScrTbl = np.array([[MatchScore, MismatchScore, MismatchScore, MismatchScore],
                      [MismatchScore, MatchScore, MismatchScore, MismatchScore],
                      [MismatchScore, MismatchScore, MatchScore, MismatchScore],
                      [MismatchScore, MismatchScore, MismatchScore, MatchScore]], dtype = float)

# Amino acid score matrices
    
PAM250 = np.array([[ 2, -2,  0,  0, -2,  0,  0,  1, -1, -1, -2, -1, -1, -3,  1,  1,  1, -6, -3,  0,  0,  0,  0, -8],
                   [-2,  6,  0, -1, -4,  1, -1, -3,  2, -2, -3,  3,  0, -4,  0,  0, -1,  2, -4, -2, -1,  0, -1, -8],
                   [ 0,  0,  2,  2, -4,  1,  1,  0,  2, -2, -3,  1, -2, -3,  0,  1,  0, -4, -2, -2,  2,  1,  0, -8],
                   [ 0, -1,  2,  4, -5,  2,  3,  1,  1, -2, -4,  0, -3, -6, -1,  0,  0, -7, -4, -2,  3,  3, -1, -8],
                   [-2, -4, -4, -5, 12, -5, -5, -3, -3, -2, -6, -5, -5, -4, -3,  0, -2, -8,  0, -2, -4, -5, -3, -8],
                   [ 0,  1,  1,  2, -5,  4,  2, -1,  3, -2, -2,  1, -1, -5,  0, -1, -1, -5, -4, -2,  1,  3, -1, -8],
                   [ 0, -1,  1,  3, -5,  2,  4,  0,  1, -2, -3,  0, -2, -5, -1,  0,  0, -7, -4, -2,  3,  3, -1, -8],
                   [ 1, -3,  0,  1, -3, -1,  0,  5, -2, -3, -4, -2, -3, -5,  0,  1,  0, -7, -5, -1,  0,  0, -1, -8],
                   [-1,  2,  2,  1, -3,  3,  1, -2,  6, -2, -2,  0, -2, -2,  0, -1, -1, -3,  0, -2,  1,  2, -1, -8],
                   [-1, -2, -2, -2, -2, -2, -2, -3, -2,  5,  2, -2,  2,  1, -2, -1,  0, -5, -1,  4, -2, -2, -1, -8],
                   [-2, -3, -3, -4, -6, -2, -3, -4, -2,  2,  6, -3,  4,  2, -3, -3, -2, -2, -1,  2, -3, -3, -1, -8],
                   [-1,  3,  1,  0, -5,  1,  0, -2,  0, -2, -3,  5,  0, -5, -1,  0,  0, -3, -4, -2,  1,  0, -1, -8],
                   [-1,  0, -2, -3, -5, -1, -2, -3, -2,  2,  4,  0,  6,  0, -2, -2, -1, -4, -2,  2, -2, -2, -1, -8],
                   [-3, -4, -3, -6, -4, -5, -5, -5, -2,  1,  2, -5,  0,  9, -5, -3, -3,  0,  7, -1, -4, -5, -2, -8],
                   [ 1,  0,  0, -1, -3,  0, -1,  0,  0, -2, -3, -1, -2, -5,  6,  1,  0, -6, -5, -1, -1,  0, -1, -8],
                   [ 1,  0,  1,  0,  0, -1,  0,  1, -1, -1, -3,  0, -2, -3,  1,  2,  1, -2, -3, -1,  0,  0,  0, -8],
                   [ 1, -1,  0,  0, -2, -1,  0,  0, -1,  0, -2,  0, -1, -3,  0,  1,  3, -5, -3,  0,  0, -1,  0, -8],
                   [-6,  2, -4, -7, -8, -5, -7, -7, -3, -5, -2, -3, -4,  0, -6, -2, -5, 17,  0, -6, -5, -6, -4, -8],
                   [-3, -4, -2, -4,  0, -4, -4, -5,  0, -1, -1, -4, -2,  7, -5, -3, -3,  0, 10, -2, -3, -4, -2, -8],
                   [ 0, -2, -2, -2, -2, -2, -2, -1, -2,  4,  2, -2,  2, -1, -1, -1,  0, -6, -2,  4, -2, -2, -1, -8],
                   [ 0, -1,  2,  3, -4,  1,  3,  0,  1, -2, -3,  1, -2, -4, -1,  0,  0, -5, -3, -2,  3,  2, -1, -8],
                   [ 0,  0,  1,  3, -5,  3,  3,  0,  2, -2, -3,  0, -2, -5,  0,  0, -1, -6, -4, -2,  2,  3, -1, -8],
                   [ 0, -1,  0, -1, -3, -1, -1, -1, -1, -1, -1, -1, -1, -2, -1,  0,  0, -4, -2, -1, -1, -1, -1, -8],
                   [-8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8,  1]], dtype = float)

BLOSUM62 = np.array([[ 4, -1, -2, -2,  0, -1, -1,  0, -2, -1, -1, -1, -1, -2, -1,  1,  0, -3, -2,  0, -2, -1,  0, -4], 
                     [-1,  5,  0, -2, -3,  1,  0, -2,  0, -3, -2,  2, -1, -3, -2, -1, -1, -3, -2, -3, -1,  0, -1, -4], 
                     [-2,  0,  6,  1, -3,  0,  0,  0,  1, -3, -3,  0, -2, -3, -2,  1,  0, -4, -2, -3,  3,  0, -1, -4], 
                     [-2, -2,  1,  6, -3,  0,  2, -1, -1, -3, -4, -1, -3, -3, -1,  0, -1, -4, -3, -3,  4,  1, -1, -4], 
                     [ 0, -3, -3, -3,  9, -3, -4, -3, -3, -1, -1, -3, -1, -2, -3, -1, -1, -2, -2, -1, -3, -3, -2, -4], 
                     [-1,  1,  0,  0, -3,  5,  2, -2,  0, -3, -2,  1,  0, -3, -1,  0, -1, -2, -1, -2,  0,  3, -1, -4], 
                     [-1,  0,  0,  2, -4,  2,  5, -2,  0, -3, -3,  1, -2, -3, -1,  0, -1, -3, -2, -2,  1,  4, -1, -4], 
                     [ 0, -2,  0, -1, -3, -2, -2,  6, -2, -4, -4, -2, -3, -3, -2,  0, -2, -2, -3, -3, -1, -2, -1, -4], 
                     [-2,  0,  1, -1, -3,  0,  0, -2,  8, -3, -3, -1, -2, -1, -2, -1, -2, -2,  2, -3,  0,  0, -1, -4], 
                     [-1, -3, -3, -3, -1, -3, -3, -4, -3,  4,  2, -3,  1,  0, -3, -2, -1, -3, -1,  3, -3, -3, -1, -4], 
                     [-1, -2, -3, -4, -1, -2, -3, -4, -3,  2,  4, -2,  2,  0, -3, -2, -1, -2, -1,  1, -4, -3, -1, -4], 
                     [-1,  2,  0, -1, -3,  1,  1, -2, -1, -3, -2,  5, -1, -3, -1,  0, -1, -3, -2, -2,  0,  1, -1, -4], 
                     [-1, -1, -2, -3, -1,  0, -2, -3, -2,  1,  2, -1,  5,  0, -2, -1, -1, -1, -1,  1, -3, -1, -1, -4], 
                     [-2, -3, -3, -3, -2, -3, -3, -3, -1,  0,  0, -3,  0,  6, -4, -2, -2,  1,  3, -1, -3, -3, -1, -4], 
                     [-1, -2, -2, -1, -3, -1, -1, -2, -2, -3, -3, -1, -2, -4,  7, -1, -1, -4, -3, -2, -2, -1, -2, -4], 
                     [ 1, -1,  1,  0, -1,  0,  0,  0, -1, -2, -2,  0, -1, -2, -1,  4,  1, -3, -2, -2,  0,  0,  0, -4], 
                     [ 0, -1,  0, -1, -1, -1, -1, -2, -2, -1, -1, -1, -1, -2, -1,  1,  5, -2, -2,  0, -1, -1,  0, -4], 
                     [-3, -3, -4, -4, -2, -2, -3, -2, -2, -3, -2, -3, -1,  1, -4, -3, -2, 11,  2, -3, -4, -3, -2, -4], 
                     [-2, -2, -2, -3, -2, -1, -2, -3,  2, -1, -1, -2, -1,  3, -3, -2, -2,  2,  7, -1, -3, -2, -1, -4], 
                     [ 0, -3, -3, -3, -1, -2, -2, -3, -3,  3,  1, -2,  1, -1, -2, -2,  0, -3, -1,  4, -3, -2, -1, -4], 
                     [-2, -1,  3,  4, -3,  0,  1, -1,  0, -3, -4,  0, -3, -3, -2,  0, -1, -4, -3, -3,  4,  1, -1, -4], 
                     [-1,  0,  0,  1, -3,  3,  4, -2,  0, -3, -3,  1, -1, -3, -1,  0, -1, -3, -2, -2,  1,  4, -1, -4], 
                     [ 0, -1, -1, -1, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2,  0,  0, -2, -1, -1, -1, -1, -1, -4], 
                     [-4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4,  1]], dtype = float)


# The following functions will be used in the Needleman-Wunsch and Smith-Waterman Functions
    
# Below is the functioned that corresponds to aligning nucleotide sequences
    
def NucSeq (ch1, ch2, ScrMtrx = NucScrTbl):
    
    '''
    
    This is a look-up function that corresponds to Match and Mismatch scores
    It will return the the row and column location of nucleotides
        
    '''
    
    if ch1 == 'A':
        idx1 = 0
    elif ch1 == 'C':
        idx1 = 1
    elif ch1 == 'G':
        idx1 = 2
    else:
        idx1 = 3
    if ch2 == 'A':
        idx2 = 0
    elif ch2 == 'C':
        idx2 = 1
    elif ch2 == 'G':
        idx2 = 2
    else:
        idx2 = 3
    return idx1, idx2

# Below is teh function that corresponds to alignment of amino acid sequences

def AASeq (ch1, ch2, ScrMtrx):
    
    '''
    
    This is a look-up function that corresponds PAM or BLOSUM tables
    
    In order to function properly, Amino Acids have to be entered into the score tables in the following order:
    A  R  N  D  C  Q  E  G  H  I  L  K  M  F  P  S  T  W  Y  V  B  Z  X  * 
    
    '''
    
    if ch1 == 'A':
        idx1 = 0
    elif ch1 == 'R':
        idx1 = 1
    elif ch1 == 'N':
        idx1 = 2
    elif ch1 == 'D':
        idx1 = 3
    elif ch1 == 'C':
        idx1 = 4
    elif ch1 == 'Q':
        idx1 = 5
    elif ch1 == 'E':
        idx1 = 6
    elif ch1 == 'G':
        idx1 = 7
    elif ch1 == 'H':
        idx1 = 8
    elif ch1 == 'I':
        idx1 = 9
    elif ch1 == 'L':
        idx1 = 10
    elif ch1 == 'K':
        idx1 = 11
    elif ch1 == 'M':
        idx1 = 12
    elif ch1 == 'F':
        idx1 = 13
    elif ch1 == 'P':
        idx1 = 14
    elif ch1 == 'S':
        idx1 = 15
    elif ch1 == 'T':
        idx1 = 16
    elif ch1 == 'W':
        idx1 = 17
    elif ch1 == 'Y':
        idx1 = 18
    elif ch1 == 'V':
        idx1 = 19
    elif ch1 == 'B':
        idx1 = 20
    elif ch1 == 'Z':
        idx1 = 21
    elif ch1 == 'X':
        idx1 = 22
    elif ch1 == '*':
        idx1 = 23
    if ch2 == 'A':
        idx2 = 0
    elif ch2 == 'R':
        idx2 = 1
    elif ch2 == 'N':
        idx2 = 2
    elif ch2 == 'D':
        idx2 = 3
    elif ch2 == 'C':
        idx2 = 4
    elif ch2 == 'Q':
        idx2 = 5
    elif ch2 == 'E':
        idx2 = 6
    elif ch2 == 'G':
        idx2 = 7
    elif ch2 == 'H':
        idx2 = 8
    elif ch2 == 'I':
        idx2 = 9
    elif ch2 == 'L':
        idx2 = 10
    elif ch2 == 'K':
        idx2 = 11
    elif ch2 == 'M':
        idx2 = 12
    elif ch2 == 'F':
        idx2 = 13
    elif ch2 == 'P':
        idx2 = 14
    elif ch2 == 'S':
        idx2 = 15
    elif ch2 == 'T':
        idx2 = 16
    elif ch2 == 'W':
        idx2 = 17
    elif ch2 == 'Y':
        idx2 = 18
    elif ch2 == 'V':
        idx2 = 19
    elif ch2 == 'B':
        idx2 = 20
    elif ch2 == 'Z':
        idx2 = 21
    elif ch2 == 'X':
        idx2 = 22
    elif ch2 == '*':
        idx2 = 23
    return idx1, idx2
